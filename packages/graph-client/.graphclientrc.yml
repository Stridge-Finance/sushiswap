sources:

  - name: Bar
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushi-labs/xsushi
        retry: 3

  - name: BentoBox
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:matthewlilley/bentobox-ethereum}
        retry: 3

  - name: Blocks
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:blocklytics/ethereum-blocks}
        retry: 3

  - name: Exchange
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushiswap/exchange-ethereum}
        retry: 3
    transforms:
      - prefix:
          value: deprecated_
          includeRootOperations: true
          includeTypes: true

  - name: SushiSwap
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:subgraph-qa/sushiswap-ethereum}
        retry: 3
      # transforms:
        # Rename type names and field names to let stitching merger merges them
        # - rename:
        #     renames:
        #       - from:
        #           type: PairWithIncentives
        #         to:
        #           type: Pair
        #       - from:
        #           type: Query
        #           field: pairWithIncentives
        #         to:
        #           type: Query
        #           field: pair
        #       - from:
        #           type: Query
        #           field: pairsWithIncentives
        #         to:
        #           type: Query
        #           field: pairs
        # - typeMerging:
        #     queryFields:
        #       - queryFieldName: incentives
        #         keyField: id
        #       - queryFieldName: pairs
        #         keyField: id

  - name: MasterChefV1
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/jiro-ono/masterchef-staging
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V1_
          includeRootOperations: true
          includeTypes: false
          ignore: 
            - _SubgraphErrorPolicy_  
      - rename:
          mode: wrap
          renames:
            - from:
                type:   Pool
                field:  owner
              to:
                type:   Pool
                field:  masterChef
            - from:
                type:   Pool
                field:  balance
              to:
                type:   Pool
                field:  slpBalance

  - name: MasterChefV2
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushiswap/master-chefv2
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V2_
          includeRootOperations: true
          includeTypes: false
          ignore: 
            - _SubgraphErrorPolicy_

transforms:
  - autoPagination:
      validateSchema: true
  - addSourceName: true

additionalTypeDefs: |
  # Types
  type ChefUserPool {
    id: BigInt!
    pair: String!
  }
  type ChefUser {
    id: ID!
    address: String!
    amount: BigInt!
    pool: ChefUserPool
    chainId: Int!
    chainName: String!
  }  
  type Incentive {
    id: ID!
    apr: Int!
  }
  type PairWithIncentives {
    id: ID!
    incentives: [Incentive!]!
  }
  # Type Extensions
  extend type Block {
    chainId: Int!
  }
  extend type Bundle {
    chainId: Int!
  }
  extend type Factory {
    chainId: Int!
  }
  extend type Rebase {
    chainId: Int!
  }
  extend type Token {
    chainId: Int!
  }  
  extend type Pair {
    chainId: Int!
  }
  # Deprecated 
  extend type deprecated_Token {
    chainId: Int!
  }
  extend type deprecated_Pair {
    chainId: Int!
  }
  extend type deprecated_LiquidityPosition {
    chainId: Int!
  }
  # Query Extensions
  extend type Query {
    crossChainBlocks(
      skip: Int = 0
      first: Int = 100
      where: Block_filter
      orderBy: Block_orderBy
      orderDirection: OrderDirection
      chainIds: [Int!]!
    ): [Block!]!
    oneDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    oneWeekBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    customBlocks(
      skip: Int = 0
      first: Int = 100
      timestamp: Int!
      chainIds: [Int!]!
    ): [Block!]!
    crossChainChefUser(
      skip: Int = 0
      first: Int = 100
      where: User_filter
      block: Block_height
      chainIds: [Int!]!
    ): [ChefUser]!
    crossChainRebases(
      skip: Int = 0
      first: Int = 100
      where: Rebase_filter
      chainIds: [Int!]!
    ): [Rebase!]!
    crossChainPairs(
      first: Int
      skip: Int
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [Int!]!
    ): [Pair!]!
    # pairWithIncentives(
    #   id: ID!
    # ): PairWithIncentives!
    # pairsWithIncentives(
    #   ids: [ID!]
    #   skip: Int = 0
    #   first: Int = 100
    #   where: Pair_filter
    #   orderBy: Pair_orderBy
    #   orderDirection: OrderDirection
    #   chainIds: [Int!]!
    # ): [PairWithIncentives!]!
  }

additionalResolvers:
  - resolvers.js
  
documents:
  - bar.graphql
  - bentobox.graphql
  - blocks.graphql
  - deprecated.graphql
  - pairs.graphql
  - masterchef.graphql

serve:
  playground: true

codegen:
  contextType: 'MeshContext & { chainId: string; chainName: string; chainShortName: string; subgraphName: string; subgraphHost: string }'