sources:

  - name: xSUSHI
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushi-labs/xsushi
        retry: 3
    # transforms:

  - name: BentoBox
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:matthewlilley/bentobox-ethereum}
        retry: 3
    # transforms:

  - name: Blocks
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:blocklytics/ethereum-blocks}
        retry: 3
    transforms:

  - name: Exchange
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushiswap/exchange-ethereum}
        retry: 3
    transforms:
      # - addSourceName: true
      - autoPagination:
          if: false
          validateSchema: false
      - prefix:
          value: deprecated_
          includeRootOperations: true
          includeTypes: true

  - name: SushiSwap
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:subgraph-qa/sushiswap-ethereum}
        retry: 3
    transforms:
      # - addSourceName: true
      # - autoPagination:
      #     validateSchema: true
      # transforms:
        # Rename type names and field names to let stitching merger merges them
        # - rename:
        #     renames:
        #       - from:
        #           type: PairWithIncentives
        #         to:
        #           type: Pair
        #       - from:
        #           type: Query
        #           field: pairWithIncentives
        #         to:
        #           type: Query
        #           field: pair
        #       - from:
        #           type: Query
        #           field: pairsWithIncentives
        #         to:
        #           type: Query
        #           field: pairs
        # - typeMerging:
        #     queryFields:
        #       - queryFieldName: incentives
        #         keyField: id
        #       - queryFieldName: pairs
        #         keyField: id

  - name: Trident
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushi-qa/trident-optimism}
        retry: 3
    transforms:

  - name: MasterChefV1
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:jiro-ono/masterchef-staging}
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V1_
          includeRootOperations: true
          includeTypes: false
          ignore: 
            - _SubgraphErrorPolicy_  
      - rename:
          mode: wrap
          renames:
            - from:
                type:   Pool
                field:  owner
              to:
                type:   Pool
                field:  masterChef
            - from:
                type:   Pool
                field:  balance
              to:
                type:   Pool
                field:  slpBalance

  - name: MasterChefV2
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushiswap/master-chefv2
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V2_
          includeRootOperations: true
          includeTypes: false
          ignore: 
            - _SubgraphErrorPolicy_

  - name: FarmsV0
    handler:
      jsonSchema:
        baseUrl: https://farm.sushi.com/api/v0
        operations:
          - type: Query
            field: farmsv0
            path: /
            method: GET
            responseSample: ./json-samples/farms-v0.json
            responseSchema: ./json-schemas/farms-v0.json
    transforms:

  - name: FarmsV1
    handler:
      jsonSchema:
        baseUrl: http://localhost:3000/api/v1
        operations:
          - type: Query
            field: farmsv1
            path: /
            method: GET
            responseSample: ./json-samples/farms-v1.json
            responseSchema: ./json-schemas/farms-v1.json
    transforms:

  - name: PricesV0
    handler:
      jsonSchema:
        baseUrl: https://token-price.sushi.com/api/v0
        operations:
          - type: Query
            field: pricesv0
            path: /{args.chainId}
            method: GET
            responseSample: ./json-samples/prices-v0.json
            responseSchema: ./json-schemas/prices-v0.json
            argTypeMap:
              chainId:
                type: integer
                nullable: false
    transforms:

  - name: PricesV1
    handler:
      jsonSchema:
        baseUrl: http://localhost:3001/api/v1/1
        operations:
          - type: Query
            field: pricesv1
            path: /
            method: GET
            responseSample: ./json-samples/prices-v1.json
            responseSchema: ./json-schemas/prices-v1.json
    transforms:

# Had to disable global transforms since we have a jsonSchema handler in here now...
transforms:
  - autoPagination:
      validateSchema: false
  - autoTypeMerging: true
  - addSourceName: true

additionalTypeDefs: |
  # Deprecated 
  extend type deprecated_Token {
    chainId: Int!
  }
  extend type deprecated_Pair {
    chainId: Int!
  }
  extend type deprecated_LiquidityPosition {
    chainId: Int!
  }

  type UserWithFarm {
    id: ID!
    unstakedBalance: BigInt!
    stakedBalance: BigInt!
    valueUSD: BigDecimal!
    pair: Pair!
    chainId: Int!
    chainName: String!
  }
  type ChefUserPool {
    id: BigInt!
    pair: String!
  }
  type ChefUser {
    id: ID!
    chainId: Int!
    chainName: String!
    address: String!
    amount: BigInt!
    pool: ChefUserPool
  }  
  type RewardToken {
    address: String!
    symbol: String!
    decimals: Int!
  }
  type Incentive {
    apr: BigDecimal!
    rewardPerDay: BigDecimal!
    rewardToken: RewardToken!
    rewarderAddress: String!
    rewarderType: String!
  }
  type Farm {
    id: ID!
    incentives: [Incentive!]!
    chefType: String!
    poolType: String!
  }

  type PairWithIncentives {
    id: ID!
    incentives: [Incentive!]!
  }
  # Type Extensions
  input Pagination {
    pageIndex: Int! = 0
    pageSize: Int! = 20
  }
  extend type Block {
    chainId: Int!
  }
  extend type Bundle {
    chainId: Int!
  }
  extend type Factory {
    chainId: Int!
  }
  extend type Rebase {
    chainId: Int!
  }
  extend type Token {
    chainId: Int!
  }  
  extend type Pair {
    # address: String!
    chainId: Int!
    liquidity1dChange: BigDecimal
    liquidity1wChange: BigDecimal
    volume1d: BigDecimal
    volume1dChange: BigDecimal
    volume1w: BigDecimal
    fees1d: BigDecimal
    fees1w: BigDecimal
    txCount1d: BigDecimal
    txCount1dChange: BigDecimal
    txCount1w: BigDecimal
    feeApr: BigDecimal
    incentiveApr: BigDecimal
    farm: Farm

  }
  extend type LiquidityPosition {
    chainId: Int!
  }
  # Query Extensions
  extend type Query {
    crossChainBlocks(
      skip: Int = 0
      first: Int = 100
      where: Block_filter
      orderBy: Block_orderBy
      orderDirection: OrderDirection
      chainIds: [Int!]!
    ): [Block!]!
    oneDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    oneWeekBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    # pairsByIds(
    #   skip: Int = 0
    #   first: Int = 100
    #   where: Pair_filter
    #   orderBy: Pair_orderBy
    #   orderDirection: OrderDirection
    #   block: Block_height
    #   ids: [String!]!
    # ): [Pair!]!
    pairsWithFarms(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [Int!]!
      farmsOnly: Boolean
      pagination: Pagination
    ): [Pair!]!
    pairsByChainId(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainId: Int!
    ): [Pair!]!
    pairsByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [Int!]!
      blocks: [Block_height!]
    ): [Pair!]!
    # pairWithIncentives(
    #   id: ID!
    # ): PairWithIncentives!
    # pairsWithIncentives(
    #   ids: [ID!]
    #   skip: Int = 0
    #   first: Int = 100
    #   where: Pair_filter
    #   orderBy: Pair_orderBy
    #   orderDirection: OrderDirection
    #   chainIds: [Int!]!
    # ): [PairWithIncentives!]!
    crossChainChefUser(
      skip: Int = 0
      first: Int = 100
      where: User_filter
      orderBy: User_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [Int!]!
    ): [ChefUser!]!
    crossChainRebases(
      skip: Int = 0
      first: Int = 100
      where: Rebase_filter
      chainIds: [Int!]!
    ): [Rebase!]!
    crossChainBundles(
      chainIds: [Int!]!
    ): [Bundle!]!
    crossChainFactories(
      chainIds: [Int!]!
    ): [Factory!]!
    crossChainPair(id: ID!, now: Int!, chainId: Int!): Pair
    crossChainLiquidityPositions(
      skip: Int = 0
      first: Int = 100
      where: LiquidityPosition_filter
      orderBy: LiquidityPosition_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [Int!]!
    ): [LiquidityPosition!]!
    crossChainUserWithFarms(
      id: ID!
      chainIds: [Int!]!
      block: Block_height
    ): [UserWithFarm!]
  }

additionalResolvers:
  - resolvers/index.js
  
documents:
  - queries/*.graphql

serve:
  endpoint: /api/graphql
  playground: true

codegen:
  contextType: 'MeshContext & { chainId: string; subgraphName: string; subgraphHost: string }'
